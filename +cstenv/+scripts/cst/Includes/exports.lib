'NOTE: REMOVE THE "OPTION EXPLICIT" LINE FROM ALL CALLING SCRIPTS/MACROS

'This file contains some library functions for exporting result data to comma separated formatted files (.csv).
'The functions append one set of results to their (automatically generated) corresponding files when called.
'The default location where the results are exported to is the "csv_exports" directory inside the directory containing the project.

'INSTRUCTIONS
'When using the AppendParameterSet function:
'Run the "Parameters.m" script to load all the parameter values into the MATLAB workspace.

'For any of the other Append* functions:
'Use the csvread(<filename>) command to import the data into MATLAB. 

'===================================================================================================================


'Exports all the S-Parameter data in the 1D Results tree
Sub AppendSParams(SetOutputPath)
  If (SetOutputPath = "") Then
	    SetOutputPath = "csv_exports"
	End If
	CreateDirs(SetOutputPath)
	root = "1D Results\S-Parameters"
	SelectTreeItem(root)
	'Get a "dictionary" of all the result items in the folder
  Set Dictionary = CreateObject("Scripting.Dictionary")
	Set Dictionary = TraverseResultTree(root, Dictionary)
	for each treePath in Dictionary
      'Get the file name containing the results from CST
	    dataFile = ResultTree.GetFileFromItemName(treePath)
	    dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
	    dataFile = Left(dataFile, Len(dataFile)-Len(".sig"))
	    'Get the result object
	    Set Result = Result1DComplex(dataFile)
	    'Get the complex data
	    arrY = Result1DComplexYToCSV(Result)
	    'Generate the target filename
	    fileName = dataFile & ".csv"
	    'Append the data to the file
	    file = FreeFile
	    Open SetOutputPath & fileName For Append As #file
	    Print #file, arrY
	    Close #file
	Next
End Sub

'Exports all the parameter values to a .m file
Sub AppendParameterSet(SetOutputPath)
  If(SetOutputPath = "") Then
	    SetOutputPath = "csv_exports"
  End If
  CreateDirs(SetOutputPath)
  text = ""
  numParams = GetNumberOfParameters()
  for n = 0 to numParams-1 Step 1
      k = GetParameterName(n)
      v = GetParameterNValue(n)
      text = text & vbNewLine & "if exist('" & k & "','var') == 0; " 
      text = text & k & " = " & v & "; else " & k & "(end+1) = " & v & "; end;"
  Next
  fileName = "Parameters.m"
  file = FreeFile
  Open SetOutputPath & fileName For Append As #file
  Print #file, text
  Close #file
End Sub 

'Exports the frequency data for the S-Parameters
Sub AppendFrequency(SetOutputPath)
    If (SetOutputPath = "") Then
      SetOutputPath = "csv_exports"
    End If
    CreateDirs(SetOutputPath)
    root = "1D Results\S-Parameters"
    SelectTreeItem(root)    
    Set Dictionary = CreateObject("Scripting.Dictionary")
    Set Dictionary = TraverseResultTree(root, Dictionary)
    for each treePath in Dictionary
      dataFile = ResultTree.GetFileFromItemName(treePath)
      dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
      dataFile = Left(dataFile, Len(dataFile)-Len(".sig"))
      Set Result = Result1DComplex(dataFile)
      arrX = Result1DXToCSV(Result)
      Exit For
    Next
    fileName = "Frequency.csv"
    file = FreeFile
    Open SetOutputPath & fileName For Append As #file
    Print #file, arrX
    Close #file
End Sub

'Exports the power balance data
Sub AppendBalance(SetOutputPath)
    If (SetOutputPath = "") Then
      SetOutputPath = "csv_exports"
    End If
    CreateDirs(SetOutputPath)
    root = "1D Results\Balance"
    Set Dictionary = CreateObject("Scripting.Dictionary")
    Set Dictionary = TraverseResultTree(root, Dictionary)
    for each treePath in Dictionary
        dataFile = ResultTree.GetFileFromItemName(treePath)
        Set Result = Result1D(dataFile)
        arrY = Result1DYToCSV(Result)
        dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
        dataFile = Left(dataFile, Len(dataFile)-Len(".bil"))
        fileName = "Balance" & dataFile & ".csv"
        file = FreeFile
        Open SetOutputPath & fileName For Append As #file
        Print #file, arrY
        Close #file
        Exit For
    Next
End Sub

'Recursive function for traversing the result tree
Function TraverseResultTree(Node, Dictionary)
    FirstChild = ResultTree.GetFirstChildName(Node)
    if FirstChild <> "" then ''This is a folder
        'loop over all children
        curChild = FirstChild
        while curChild <> ""
            Set Dictionary = TraverseResultTree(curChild, Dictionary)
            curChild = ResultTree.GetNextItemName(curChild)
        Wend
    else ''This is a file
        Dictionary.Add Node, 0
    End if
    Set TraverseResultTree = Dictionary
End Function

'Generates a comma separated string containing complex data
Function Result1DComplexYToCSV(Result)
    arrY = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
        YRe = Result.getYRe(index)
        YIm = Result.getYIm(index)
        if index = 0 then
            if YIm > 0 then
                arrY = arrY & cStr(YRe) & "+" & cStr(YIm) & "j"
            else
                arrY = arrY & cStr(YRe) & cStr(YIm) & "j"
            End if
        else
            if YIm > 0 then
                arrY = arrY & "," & cStr(YRe) & "+" & cStr(YIm) & "j"
            else
                arrY = arrY & "," & cStr(YRe) & cStr(YIm) & "j"
            End if
        End if
    Next
    Result1DComplexYToCSV = arrY
End Function

'Generates a comma separated string containing the y-axis data
Function Result1DYToCSV(Result)
	arrY = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
    	if index = 0 then
            arrY = arrY & cStr(Result.getY(index))
        else
            arrY = arrY & "," & cStr(Result.getY(index))
        End if
    Next
    Result1DYToCSV = arrY
End Function

'Generates a comma separated string containing the x-axis data
Function Result1DXToCSV(Result)
    arrX = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
    	if index = 0 then
            arrX = arrX & cStr(Result.getX(index))
        else
            arrX = arrX & "," & cStr(Result.getX(index))
        End if
    Next
    Result1DXToCSV = arrX
End Function

'Creates a folder from the specified path
Sub CreateDirs(paths)
    ' Argument:
    ' paths   [string]   folder(s) to be created, single or
    '                        multi level, absolute or relative,
    '                        "d:\folder\subfolder" format or UNC
    Set fs = CreateObject("Scripting.FileSystemObject")
    ' Convert relative to absolute path
    strDirs = fs.GetAbsolutePathName(paths)
    ' Split a multi level path in its "components"
    arrDirs = Split(strDirs, "\")
    ' Check if the absolute path is UNC or not
    if Left(strDirs, 2) = "\\" then
        strDirBuild = "\\" & arrDirs(2) & "\" & arrDirs(3) & "\"
        idxFirst    = 4
    else
        strDirBuild = arrDirs(0) & "\"
        idxFirst    = 1
    end if
    ' Check each (sub)folder and create it if it doesn't exist
    for i = idxFirst to Ubound(arrDirs)
        strDirBuild = fs.BuildPath(strDirBuild, arrDirs(i))
        if not fs.FolderExists(strDirBuild) then 
            fs.CreateFolder strDirBuild
        end if
    next
End Sub
