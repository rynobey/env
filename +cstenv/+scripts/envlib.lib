Function AppendSParams()
    CreateDirs("results")
    root = "1D Results\S-Parameters"
    SelectTreeItem(root)    
    Set Dictionary = CreateObject("Scripting.Dictionary")
    Set Dictionary = TraverseResultTree(root, Dictionary)
    for each treePath in Dictionary
        dataFile = ResultTree.GetFileFromItemName(treePath)
        dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
        dataFile = Left(dataFile, Len(dataFile)-Len(".sig"))
        Set Result = Result1DComplex(dataFile)
        arrY = Result1DComplexYToCSV(Result)
        fileName = dataFile & ".csv"
        file = FreeFile
        Open "results\" & fileName For Append As #file
        Print #file, arrY
        Close #file
    Next
End Function

Function AppendParameterSet()
    CreateDirs("results")
    text = ""
    numParams = GetNumberOfParameters()
    for n = 0 to numParams-1 Step 1
        k = GetParameterName(n)
        v = GetParameterNValue(n)
        text = text & vbNewLine & "if exist('" & k & "','var') == 0; " 
        text = text & k & " = " & v & "; else " & k & "(end+1) = " & v & "; end;"
    Next
    fileName = "Parameters.m"
    file = FreeFile
    Open "results\" & fileName For Append As #file
    Print #file, text
    Close #file
End Function

Function AppendFrequency()
    CreateDirs("results")
    root = "1D Results\S-Parameters"
    SelectTreeItem(root)    
    Set Dictionary = CreateObject("Scripting.Dictionary")
    Set Dictionary = TraverseResultTree(root, Dictionary)
    for each treePath in Dictionary
      dataFile = ResultTree.GetFileFromItemName(treePath)
      dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
      dataFile = Left(dataFile, Len(dataFile)-Len(".sig"))
      Set Result = Result1DComplex(dataFile)
      arrX = Result1DXToCSV(Result)
      Exit For
    Next
    fileName = "Frequency.csv"
    file = FreeFile
    Open "results\" & fileName For Append As #file
    Print #file, arrX
    Close #file
End Function

Function AppendBalance()
    CreateDirs("results")
    root = "1D Results\Balance"
    Set Dictionary = CreateObject("Scripting.Dictionary")
    Set Dictionary = TraverseResultTree(root, Dictionary)
    for each treePath in Dictionary
        dataFile = ResultTree.GetFileFromItemName(treePath)
        Set Result = Result1D(dataFile)
        arrY = Result1DYToCSV(Result)
        dataFile = Right(dataFile, Len(dataFile)-inStrRev(dataFile, "\"))
        dataFile = Left(dataFile, Len(dataFile)-Len(".bil"))
        fileName = "Balance" & dataFile & ".csv"
        file = FreeFile
        Open "results\" & fileName For Append As #file
        Print #file, arrY
        Close #file
        Exit For
    Next
End Function

Function TraverseResultTree(Node, Dictionary)
    FirstChild = ResultTree.GetFirstChildName(Node)
    if FirstChild <> "" then ''This is a folder
        'loop over all children
        curChild = FirstChild
        while curChild <> ""
            Set Dictionary = TraverseResultTree(curChild, Dictionary)
            curChild = ResultTree.GetNextItemName(curChild)
        Wend
    else ''This is a file
        Dictionary.Add Node, 0
    End if
    Set TraverseResultTree = Dictionary
End Function

Function Result1DComplexYToCSV(Result)
    arrY = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
        YRe = Result.getYRe(index)
        YIm = Result.getYIm(index)
        if index = 0 then
            if YIm > 0 then
                arrY = arrY & cStr(YRe) & "+" & cStr(YIm) & "j"
            else
                arrY = arrY & cStr(YRe) & cStr(YIm) & "j"
            End if
        else
            if YIm > 0 then
                arrY = arrY & "," & cStr(YRe) & "+" & cStr(YIm) & "j"
            else
                arrY = arrY & "," & cStr(YRe) & cStr(YIm) & "j"
            End if
        End if
    Next
    Result1DComplexYToCSV = arrY
End Function

Function Result1DYToCSV(Result)
	arrY = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
    	if index = 0 then
            arrY = arrY & cStr(Result.getY(index))
        else
            arrY = arrY & "," & cStr(Result.getY(index))
        End if
    Next
    Result1DYToCSV = arrY
End Function

Private Function Result1DXToCSV(Result)
	arrX = ""
    N = Result.GetN
    for index = 0 To N-1 Step 1
    	if index = 0 then
            arrX = arrX & cStr(Result.getX(index))
        else
            arrX = arrX & "," & cStr(Result.getX(index))
        End if
    Next
    Result1DXToCSV = arrX
End Function

Function CreateDirs(paths)
    ' Argument:
    ' paths   [string]   folder(s) to be created, single or
    '                        multi level, absolute or relative,
    '                        "d:\folder\subfolder" format or UNC
    Set fs = CreateObject("Scripting.FileSystemObject")
    ' Convert relative to absolute path
    strDirs = fs.GetAbsolutePathName(paths)
    ' Split a multi level path in its "components"
    arrDirs = Split(strDirs, "\")
    ' Check if the absolute path is UNC or not
    if Left(strDirs, 2) = "\\" then
        strDirBuild = "\\" & arrDirs(2) & "\" & arrDirs(3) & "\"
        idxFirst    = 4
    else
        strDirBuild = arrDirs(0) & "\"
        idxFirst    = 1
    end if
    ' Check each (sub)folder and create it if it doesn't exist
    for i = idxFirst to Ubound(arrDirs)
        strDirBuild = fs.BuildPath(strDirBuild, arrDirs(i))
        if not fs.FolderExists(strDirBuild) then 
            fs.CreateFolder strDirBuild
        end if
    next
End Function